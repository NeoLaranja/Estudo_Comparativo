import random
import timeit

def bucket_sort(arr):
    trocas = 0
    comparacoes = 0

    # Definindo o número de baldes
    num_buckets = 10
    buckets = [[] for _ in range(num_buckets)]

    # Distribuindo os elementos nos baldes
    for num in arr:
        index = int(num * num_buckets)
        buckets[index].append(num)
        trocas += 1

    # Ordenando cada balde usando um algoritmo auxiliar (neste caso, usaremos o Insertion Sort)
    for i in range(num_buckets):
        trocas_bucket, comparacoes_bucket = insertion_sort(buckets[i])
        trocas += trocas_bucket
        comparacoes += comparacoes_bucket

    # Concatenando os baldes ordenados
    sorted_arr = [num for bucket in buckets for num in bucket]

    return sorted_arr, trocas, comparacoes

def insertion_sort(arr):
    trocas = 0
    comparacoes = 0

    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        comparacoes += 1

        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
            trocas += 1
            comparacoes += 1

        arr[j + 1] = key

    return trocas, comparacoes

# Função para medir o tempo de execução usando timeit
def medir_tempo_execucao(arr):
    return timeit.timeit(lambda: bucket_sort(arr.copy()), number=1)

# Geração de uma lista aleatória com 1000 elementos
arr_1000 = [random.random() for _ in range(1000)]

# Medição do tempo de execução, trocas e comparações para o caso médio (array aleatório)
sorted_arr, trocas_caso_medio, comparacoes_caso_medio = bucket_sort(arr_1000.copy())
tempo_caso_medio = medir_tempo_execucao(arr_1000)

print("Tempo de execução para o caso médio: {:.6f} segundos".format(tempo_caso_medio))
print("Trocas para o caso médio:", trocas_caso_medio)
print("Comparações para o caso médio:", comparacoes_caso_medio)
