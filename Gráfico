import timeit
import matplotlib.pyplot as plt

def bubble_sort(arr):
    # Implementação do Bubble Sort

def insertion_sort(arr):
    # Implementação do Insertion Sort

def selection_sort(arr):
    # Implementação do Selection Sort

def quick_sort(arr):
    # Implementação do Quick Sort

def bucket_sort(arr):
    # Implementação do Bucket Sort

# Função para gerar um array aleatório de tamanho n
def generate_random_array(n):
    return [random.randint(1, 1000) for _ in range(n)]

# Função para medir o tempo de execução de um algoritmo
def measure_time(algorithm, arr):
    return timeit.timeit(lambda: algorithm(arr.copy()), number=1)

# Tamanhos de entrada
sizes = [100, 500, 1000, 2000]

# Dicionários para armazenar tempos de execução
bubble_sort_times = {}
insertion_sort_times = {}
selection_sort_times = {}
quick_sort_times = {}
bucket_sort_times = {}

for size in sizes:
    arr = generate_random_array(size)
    
    bubble_sort_times[size] = measure_time(bubble_sort, arr)
    insertion_sort_times[size] = measure_time(insertion_sort, arr)
    selection_sort_times[size] = measure_time(selection_sort, arr)
    quick_sort_times[size] = measure_time(quick_sort, arr)
    bucket_sort_times[size] = measure_time(bucket_sort, arr)

# Criando o gráfico
plt.plot(sizes, list(bubble_sort_times.values()), label='Bubble Sort')
plt.plot(sizes, list(insertion_sort_times.values()), label='Insertion Sort')
plt.plot(sizes, list(selection_sort_times.values()), label='Selection Sort')
plt.plot(sizes, list(quick_sort_times.values()), label='Quick Sort')
plt.plot(sizes, list(bucket_sort_times.values()), label='Bucket Sort')

plt.xlabel('Tamanho do Array')
plt.ylabel('Tempo de Execução (s)')
plt.legend()
plt.show()
